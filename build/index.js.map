{"version":3,"sources":["../index.js"],"names":["app","use","graphQLpath","types","path","join","__dirname","resolvers","typeDefs","all","server","ApolloServer","express","static","process","env","NODE_ENV","get","request","response","sendFile","applyMiddleware","PORT","listen","port","console","log","graphqlPath"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AAIA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;AACA,IAAMC,cAAc,UAApB;;AAEA,IAAMC,QAAQ,qCAAWC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAX,CAAd;AACA,IAAMC,YAAY,yCAAe,qCAAWH,eAAKC,IAAL,CAAUC,SAAV,EAAqB,aAArB,CAAX,CAAf,CAAlB;AACA,IAAME,WAAW,qCAAWL,KAAX,EAAkB,EAAEM,KAAK,IAAP,EAAlB,CAAjB;;AAEA,IAAMC,SAAS,IAAIC,iCAAJ,CAAiB,EAAEH,kBAAF,EAAYD,oBAAZ,EAAjB,CAAf;;AAEAP,IAAIC,GAAJ,CAAQC,WAAR,EAAqBU,kBAAQC,MAAR,CAAe,QAAf,CAArB;;AAEA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzChB,MAAIC,GAAJ,CAAQW,kBAAQC,MAAR,CAAe,cAAf,CAAR;AACAb,MAAIiB,GAAJ,CAAQ,IAAR,EAAc,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACnCA,aAASC,QAAT,CAAkBhB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,YAA/B,CAAlB;AACD,GAFD;AAGD;;AAEDI,OAAOW,eAAP,CAAuB,EAAErB,QAAF,EAAOE,wBAAP,EAAvB;;AAEA,IAAMoB,OAAOR,QAAQC,GAAR,CAAYO,IAAZ,IAAoB,IAAjC;;AAEAtB,IAAIuB,MAAJ,CAAW,EAAEC,MAAMF,IAAR,EAAX,EAA2B;AAAA,SACzBG,QAAQC,GAAR,wDAAuDhB,OAAOiB,WAA9D,CADyB;AAAA,CAA3B","file":"index.js","sourcesContent":["import express from 'express'\nimport { ApolloServer, gql } from 'apollo-server-express'\nimport { fileLoader, mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\nimport path from 'path';\nimport cors from 'cors'\n\nimport 'babel-polyfill';\n\n\n\nconst app = express();\napp.use(cors())\nconst graphQLpath = '/graphql';\n\nconst types = fileLoader(path.join(__dirname, './schema'));\nconst resolvers = mergeResolvers(fileLoader(path.join(__dirname, './resolvers')))\nconst typeDefs = mergeTypes(types, { all: true });\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\napp.use(graphQLpath, express.static('public'));\n\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static('build/public'));\n  app.get('/*', (request, response) => {\n    response.sendFile(path.join(__dirname, 'public', 'index.html'));\n  });\n}\n\nserver.applyMiddleware({ app, graphQLpath });\n\nconst PORT = process.env.PORT || 4000\n\napp.listen({ port: PORT }, () =>\n  console.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`)\n)"]}