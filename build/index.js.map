{"version":3,"sources":["../index.js"],"names":["app","use","graphQLpath","types","path","join","__dirname","resolvers","typeDefs","all","server","ApolloServer","express","static","get","req","res","sendFile","resolve","applyMiddleware","PORT","process","env","listen","port","console","log","graphqlPath"],"mappings":";;AAQA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AAdA;AACA;AACA;AACA;AACA;;AAEA;;AAYA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;AACA,IAAMC,cAAc,UAApB;;AAEA,IAAMC,QAAQ,qCAAWC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAX,CAAd;AACA,IAAMC,YAAY,yCAAe,qCAAWH,eAAKC,IAAL,CAAUC,SAAV,EAAqB,aAArB,CAAX,CAAf,CAAlB;AACA,IAAME,WAAW,qCAAWL,KAAX,EAAkB,EAAEM,KAAK,IAAP,EAAlB,CAAjB;;AAEA,IAAMC,SAAS,IAAIC,iCAAJ,CAAiB,EAAEH,kBAAF,EAAYD,oBAAZ,EAAjB,CAAf;;AAEAP,IAAIC,GAAJ,CAAQC,WAAR,EAAqBU,kBAAQC,MAAR,CAAe,QAAf,CAArB;;AAEAb,IAAIc,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIC,QAAJ,CAAab,eAAKc,OAAL,CAAaZ,SAAb,EAAwB,QAAxB,EAAkC,YAAlC,CAAb;AACD,CAFD;;AAIAI,OAAOS,eAAP,CAAuB,EAAEnB,QAAF,EAAOE,wBAAP,EAAvB;;AAEA,IAAMkB,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEApB,IAAIuB,MAAJ,CAAW,EAAEC,MAAMJ,IAAR,EAAX,EAA2B;AAAA,SACzBK,QAAQC,GAAR,wDAAuDhB,OAAOiB,WAA9D,CADyB;AAAA,CAA3B;;AAWA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"index.js","sourcesContent":["// import express from 'express'\n// import { ApolloServer, gql } from 'apollo-server-express'\n// import cors from 'cors'\n// import http from 'http'\n// import { ApolloServer } from 'apollo-server'\n\n// Apollo Server Express w middleware\n\nimport express from 'express'\nimport { ApolloServer, gql } from 'apollo-server-express'\nimport { fileLoader, mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\nimport path from 'path';\nimport cors from 'cors'\n\nimport 'babel-polyfill';\n\n\n\nconst app = express();\napp.use(cors())\nconst graphQLpath = '/graphql';\n\nconst types = fileLoader(path.join(__dirname, './schema'));\nconst resolvers = mergeResolvers(fileLoader(path.join(__dirname, './resolvers')))\nconst typeDefs = mergeTypes(types, { all: true });\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\napp.use(graphQLpath, express.static('public'));\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve(__dirname, 'public', 'index.html'))\n} )\n\nserver.applyMiddleware({ app, graphQLpath });\n\nconst PORT = process.env.PORT || 4000\n\napp.listen({ port: PORT }, () =>\n  console.log(`ğŸš€ Server ready at http://localhost:4000${server.graphqlPath}`)\n)\n\n\n\n\n\n\n\n\n// Apollo Server\n\n// import path from 'path';\n// import { fileLoader, mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\n\n// const types = fileLoader(path.join(__dirname, './schema'));\n// const resolvers = mergeResolvers(fileLoader(path.join(__dirname, './resolvers')))\n// const typeDefs = mergeTypes(types, { all: true });\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n// const PORT = process.env.PORT || 4000\n\n// server.listen({port: PORT}).then((server) => {\n//   console.log(`ğŸš€  Server ready at ${server.url}`);\n// });"]}