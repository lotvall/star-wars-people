{"version":3,"sources":["../../resolvers/people.js"],"names":["UrlLoader","DataLoader","Promise","all","urls","map","getFromUrl","url","Person","homeworld","args","context","info","load","data","species","res","s","films","f","Query","people","parent","category","results","categoryRes","p","person","residents","concat","apply"],"mappings":"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","file":"people.js","sourcesContent":["import axios from 'axios'\nimport DataLoader from 'dataloader'\nimport { getCategory } from '../helpers/getCategoryFromUrl'\n\nconst UrlLoader = new DataLoader(urls => \n    Promise.all(urls.map(getFromUrl)),\n);\nconst getFromUrl = async (url) => {\n    return await axios(url)\n}\n\nexport default {\n  Person: {\n    homeworld: async ({ homeworld }, args, context, info) => {\n      const { data } = await UrlLoader.load(homeworld)\n      return data\n    },\n    species: ({ species }, args, context, info) => {\n      const res = species.map(async s => {\n        const { data } = await UrlLoader.load(s)\n        return data\n      })\n      return res\n      \n    },\n    films: async ({ films }, args, context, info) => {\n      const res = films.map(async f => {\n        const { data } = await UrlLoader.load(f)\n        return data\n      })\n      return res\n    }\n  },\n  Query: {\n    people: async (parent, { url }, context, info) => {\n      const { data } = await UrlLoader.load(url)\n\n      const category = getCategory(url)\n\n      if (category === \"people\" ) {\n        return data\n      }\n\n      const people = category === \"planets\" ? \"residents\" : \"people\" \n      \n      const res = await Promise.all(data.results.map(async categoryRes => {\n        const residents = await Promise.all(categoryRes[people].map(async (p) => {\n          const person = await UrlLoader.load(p);\n          return person.data\n        }));\n        return residents\n      }))\n\n      const results = [].concat.apply([], res);\n\n      return {\n        ...data,\n        results\n      }\n    },\n  }\n\n}"]}